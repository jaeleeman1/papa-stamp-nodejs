<div class="cards" id="card-list">
    <% var shopListMainCnt = shopListMainData.length %>
    <% for (var i=0; i<shopListMainCnt; i++) {%>
    <div class="card-img shadow">
        <div class="container">
            <div class="card flipped">
                <figure class="front">
                    <img class="papa-base-img" src="/images/shop-card/<%= shopListMainData[i].SHOP_BACK_IMG %>" alt="back">
                </figure>

                <figure class="back">
                    <img class="papa-base-img" src="/images/shop-card/<%= shopListMainData[i].SHOP_FRONT_IMG %>" alt="front">
                </figure>
            </div>
        </div>
    </div>
    <%}%>
</div>

<script type="text/javascript">
    var map='';
    function deg2rad(deg) {
        return (deg * Math.PI / 180.0);
    }

    // This function converts radians to decimal degrees
    function rad2deg(rad) {
        return (rad * 180 / Math.PI);
    }

    function mapPapaShop() {
        var currentLat = $("#current_lat").val();
        var currentLng = $("#current_lng").val();

        var currentMarkerSrc = '/images/shop-map/current_point.png', // 현재 위치 마커이미지
            currentMarkerSize = new daum.maps.Size(55, 80), // 현재 위치 마커이미지의 크기
            currentMarkerOption = {offset: new daum.maps.Point(27, 69)}; // 현재 위치 마커이미지의 옵션

        var currentMarkerImage = new daum.maps.MarkerImage(currentMarkerSrc, currentMarkerSize, currentMarkerOption);
        var currentMarkerPosition = new daum.maps.LatLng(currentLat, currentLng); // 마커가 표시될 위치

        // 마커와 인포윈도우를 표시합니다
        displayMarker(currentMarkerPosition, currentMarkerImage);

        var cooperatorShopUrl ='/mapData/cooperator/papaShop.json';

        // 마커 클러스터러를 생성합니다
        var clusterer = new daum.maps.MarkerClusterer({
            map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
            averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
            minLevel: 8 // 클러스터 할 최소 지도 레벨
        });

        var selectedMarker = null;

        $.get(cooperatorShopUrl, function(data) {
            var imageSrc = '/images/shop-map/shop_point.png';
            var clickImageSrc = '/images/shop-map/select_point.png';

            // 표시될 shop data
            var imageSize = new daum.maps.Size(55, 80), // 마커이미지의 크기입니다
                imageOprion = {offset: new daum.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.
            var normalImage = new daum.maps.MarkerImage(imageSrc, imageSize, imageOprion);

            // 클릭된 shop data
            var clickImageSize = new daum.maps.Size(55, 80), // 마커이미지의 크기입니다
                clickImageOprion = {offset: new daum.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.
            var clickImage = new daum.maps.MarkerImage(clickImageSrc, clickImageSize, clickImageOprion);

            // 거리순 정렬
            var shopPositions = [];

            for(var i=0; i<data.positions.length; i++) {
                var theta = currentLng - data.positions[i].lng;
                var dist = Math.cos(deg2rad(currentLat)) *  Math.cos(deg2rad(data.positions[i].lat))
                    * Math.cos(deg2rad(theta)) + Math.sin(deg2rad(currentLat))
                    * Math.sin(deg2rad(data.positions[i].lat));
                dist = Math.acos(dist);
                dist = rad2deg(dist);
                dist = dist * 60 * 1.1515;
                dist = dist * 1.609344;
                shopPositions[i] = {'index': i, 'lat': data.positions[i].lat,'lng': data.positions[i].lng, 'distance': Number(dist*1000).toFixed(2)};
            }
            shopPositions.sort(function(a,b) {
                if(a.distance > b.distance) {
                    return 1;
                }
                if(a.distance < b.distance) {
                    return -1;
                }
                return 0
            });

            var markers = $(shopPositions).map(function(i, position) {
                var marker = new daum.maps.Marker({
                    position : new daum.maps.LatLng(position.lat, position.lng),
                    image:normalImage
                });

                daum.maps.event.addListener(marker, 'click', function() {
                    // 클릭된 마커가 없고, click 마커가 클릭된 마커가 아니면 마커의 이미지를 클릭 이미지로 변경
                    if (!selectedMarker || selectedMarker !== marker) {
                        // 클릭된 마커 객체가 null이 아니면 클릭된 마커의 이미지를 기본 이미지로 변경하고
                        !!selectedMarker && selectedMarker.setImage(normalImage);

                        // 현재 클릭된 마커의 이미지는 클릭 이미지로 변경합니다
                        marker.setImage(clickImage);
                    }
                    // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다
                    selectedMarker = marker;
                    //shop data
                    var dataString = {'current_lat': position.lat, 'current_lng': position.lng};
                    $.ajax({
                        url: $("#url").val() + '/v1/shop/shopData',
                        type: 'GET',
                        dataType: 'json',
                        data: dataString,
                        success: function(data) {
                            var shopData = data.shopData;
                            var clickMapData = document.getElementById('map_list_wrap');
                            clickMapData.innerHTML = '';

                            clickMapData.innerHTML += '<div class="address-row">' +
                                    '<div class="col-xs-10 address-right">' +
                                        '<a href="javascript:"><div class="icon" onclick="guidePapaShopLoad('+ shopData.SHOP_LAT+','+ shopData.SHOP_LNG+')"><img class="guide" src="/images/shop-map/map_load_pin.png"></div></a>' +
                                        '<div class="select-shop-name">'+ shopData.SHOP_NAME +
                                            '<span class="select-shop-sub-name">(' + shopData.SHOP_SUB_NAME + ')</span>' +
                                            '<span class="select-shop-phone"><i class="fa fa-phone" style="font-size: 30px;margin-right:10px;"></i> : '+ shopData.SHOP_PHONE +'</span>' +
                                            '<p class="select-shop-addr"><i class="fa fa-home" style="font-size: 30px;margin-right:10px;"></i> : '+ shopData.SHOP_ADDR +'</p>' +
                                        '</div>' +
                                    '</div>' +
                                '</div>';

                            var appendId = $('#common-template');
                            var appendData = '<div class="cards" id="select-card">' +
                                    '<div class="card-img shadow">' +
                                        '<div class="container">' +
                                            '<div class="card flipped">' +
                                                '<figure class="front">' +
                                                    '<img class="papa-base-img" src="/images/shop-card/'+ shopData.SHOP_BACK_IMG +'" alt="back">' +
                                                '</figure>' +
                                                '<figure class="back">' +
                                                    '<img class="papa-base-img" src="/images/shop-card/'+ shopData.SHOP_FRONT_IMG +'" alt="front">' +
                                                '</figure>' +
                                            '</div>' +
                                        '</div>' +
                                    '</div>' +
                                '</div>';
                            if($('#select-card').length) {
                                $('#select-card').remove();
                                appendId.append(appendData);
                            }else {
                                appendId.append(appendData);
                            }
                        },
                        error: function(request, status, error) {
                            console.log("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
                            console.log('Error occured');
                        }
                    });
                });

                if(i == 0) {
                    daum.maps.event.trigger(marker, 'click', '');
                }

                return marker;
            });

            // 클러스터러에 마커들을 추가합니다
            clusterer.addMarkers(markers);
        });
    }

    // 지도에 마커와 인포윈도우를 표시하는 함수입니다
    function displayMarker(currentMarkerPosition, currentMarkerImage) {
        map = new daum.maps.Map(document.getElementById('map'), { // 지도를 표시할 div
            center : currentMarkerPosition, // 지도의 중심좌표
            level : 8 // 지도의 확대 레벨
        });

        // 현재 위치 마커를 생성합니다
        var marker = new daum.maps.Marker({
            map: map,
            position: currentMarkerPosition,
            image: currentMarkerImage // 마커이미지 설정
        });
        marker.setMap(map);

        var currentIwContent = '<div style="padding:5px;font-size:32px;">현재 위치</div>'; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다

        var currentInfowindow = new daum.maps.InfoWindow({
            position : currentMarkerPosition,
            content : currentIwContent
        });

        currentInfowindow.open(map, marker);
    }

    function guidePapaShopLoad(shopLat, shopLng) {
        // 지도를 재설정할 범위정보를 가지고 있을 LatLngBounds 객체를 생성합니다
        var bounds = new daum.maps.LatLngBounds();

        var mouseEvent = {
            latLng: new daum.maps.LatLng(shopLat, shopLng)
        };

        daum.maps.event.trigger(map, 'click', mouseEvent);

        // LatLngBounds 객체에 좌표를 추가합니다
        bounds.extend(new daum.maps.LatLng(shopLat, shopLng));

        // LatLngBounds 객체에 추가된 좌표들을 기준으로 지도의 범위를 재설정합니다. 이때 지도의 중심좌표와 레벨이 변경될 수 있습니다
        map.setBounds(bounds);
    }

    // 지도 확대, 축소 컨트롤에서 확대 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
    function zoomIn() {
        map.setLevel(map.getLevel() - 1);
    }

    // 지도 확대, 축소 컨트롤에서 축소 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
    function zoomOut() {
        map.setLevel(map.getLevel() + 1);
    }
</script>