<ul class="my-card-list" id="card-list">
    <% var couponListCnt = couponListData.length %>
    <% if(couponListCnt > 0) { %>
    <% for (var i=0; i<couponListCnt; i++) {%>
        <% var shopID = couponListData[i].SHOP_ID
            var shopName = couponListData[i].SHOP_NAME
            var shopSubName = couponListData[i].SHOP_SUB_NAME
            var couponImg = couponListData[i].COUPON_IMG
            var couponName = couponListData[i].COUPON_NAME
            var couponPrice = couponListData[i].COUPON_PRICE
            var expirationDate = couponListData[i].EXPIRATION_DT
            var couponNumber = couponListData[i].COUPON_NUMBER
            var usedDate = couponListData[i].USED_DT
            var usedYn = couponListData[i].USED_YN %>
        <%if(usedYn == 'Y') {%>
        <li class="my-card-coupon used-deemed" id="<%= shopID %>-<%= couponNumber %>">
        <%}else {%>
        <li class="my-card-coupon" id="<%= shopID %>-<%= couponNumber %>">
        <%}%>
            <div class="my-container">
                <div class="my-card">
                    <figure class="front">
                        <img class="base-img" src="/images/shop-card/front/<%= couponImg %>" alt="back">
                        <div class="caption">
                            <%if(usedYn == 'Y') {%>
                            <h5 class="delete-coupon" onclick="deleteCoupon('<%= shopID %>', '<%= couponNumber %>');">삭제하기</h5>
                            <h3><%= shopName %><span>(<%= shopSubName %>)</span></h3>
                            <h4><%= couponName %><span><%= couponPrice %>원</span></h4>
                            <div class="coupon-name">사용날짜 : <span style="font-size:1em;color:white"><%= usedDate %></span></div>
                            <h6>✿ 유효 기간 : <%= expirationDate %></h6>
                            <%}else {%>
                            <h5 id="use-coupon-<%= couponNumber %>" onclick="useCoupon('<%= shopID %>', '<%= shopName %>', '<%= shopSubName %>', '<%= couponName %>', '<%= couponNumber %>')">사용하기</h5>
                            <h3><%= shopName %><span>(<%= shopSubName %>)</span></h3>
                            <h4><%= couponName %><span><%= couponPrice %>원</span></h4>
                            <div class="coupon-name" id="use-coupon-date-<%= couponNumber %>">쿠폰 번호 : <span style="font-size:1em;color:white"><%= couponNumber %></span></div>
                            <h6>✿ 유효 기간 : <%= expirationDate %></h6>
                            <%}%>
                        </div>
                    </figure>
                </div>
            </div>
        </li>
        <%}%>
    <%} else {%>
    <li class="my-card-coupon blank-card">
        <div class="my-container">
            <div class="my-card">
                <figure class="front">
                    <img class="base-img" src="/images/shop-coupon/default-coupon.png" alt="back">
                    <div class="caption">
                        <h6>적립한 쿠폰이 없습니다.
                            <br></br>
                            설정-튜토리얼에서 스탬프 및 쿠폰 적립 방법을
                            <br></br>
                            확인해 보세요.
                        </h6>
                    </div>
                </figure>
            </div>
        </div>
    </li>
    <%}%>
</ul>

<div id="use-coupon-confirm" class="dialog-confirm">
    <figure>
        <h5 class="confirm-coupon-number" id="confirm-coupon-number"></h5>
        <h3 class="confirm-shop-name" id="confirm-shop-name"></h3>
        <h4 class="confirm-coupon-name" id="confirm-coupon-name"></h4>
        해당 쿠폰을 사용하시겠습니까?
    </figure>
</div>

<div id="delete-coupon-confirm" class="dialog-confirm">
    <figure>
        <div style="margin-top: 15px;">사용하신 쿠폰을 삭제하시겠습니까?</div>
    </figure>
</div>

<div id="shop-manager-confirm" class="dialog-confirm">
    <figure>
        <div style="margin-top: 15px;">매니저가 확인 중입니다. 잠시만 기다려 주세요!</div>
    </figure>
</div>

<script type="text/javascript">
    function useCouponAndroid(shopId, couponNumber) {
        var usedDate = new Date().toISOString().slice(0,16).replace("T",", ");
        document.getElementById("use-coupon-btn").className = 'delete-coupon';
        document.getElementById("use-coupon-btn").onclick = function(){deleteCoupon();};
        document.getElementById("use-coupon-btn").innerHTML = '삭제하기';
        document.getElementById("use-coupon-date-btn").innerHTML = '사용날짜 : ' + '<span style="font-size:1em;color:white">' + usedDate +'</span>';
        $("#"+shopId+"-"+couponNumber).addClass("used-deemed");
    }

    function useCouponCallback(shopId, couponNumber) {
        var dataString = {'shop_id': shopId};

        $.ajax({
            url: $("#url").val() + '/user/v1/shopIdToBeacon',
            type: 'GET',
            dataType: 'json',
            data : dataString,
            success: function(data) {
                var shopBeacon = data.shopBeacon;
                if(window.Bridge) {
                    window.Bridge.callCouponActivity(shopId, shopBeacon, couponNumber);
                }
            },
            error: function(request, status, error) {
                console.error("use coupon : code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
            }
        });
    }

    function deleteCouponCallback(shopId, couponNumber) {
        var userId = $("#user_id").val();
        var dataString = {'shop_id': shopId, 'coupon_number': couponNumber};
        var headers = {};
        headers["user_id"] = userId;

        $.ajax({
            url: $("#url").val() + '/coupon/v1/deleteCoupon',
            type: 'PUT',
            headers : headers,
            dataType: 'json',
            data : dataString,
            success: function(data) {
                location.reload();
            },
            error: function(request, status, error) {
                console.error("use coupon : code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
            }
        });
    }

    function retryCoupon() {
        var shopId = $("#shop_id").val();
        var couponNumber = $("#confirm-coupon-number").text();
        var userId = $("#user_id").val();
        var dataString = {'shop_id': shopId, 'coupon_number': couponNumber, 'request_check' : 'false'};
        var headers = {};
        headers["user_id"] = userId;

        $.ajax({
            url: $("#url").val() + '/notification/v1/request-coupon',
            type: 'POST',
            headers : headers,
            dataType: 'json',
            data : dataString,
            success: function(data) {
                console.log(data.resultData);
            },
            error: function(request, status, error) {
                console.error("use coupon : code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
            }
        });
    }

    function useCoupon(shopId, shopName, shopSubName, couponName, couponNum) {
        document.getElementById("confirm-coupon-number").innerHTML= couponNum;
        document.getElementById("confirm-shop-name").innerHTML= shopName+'<span class="confirm-sub-name">('+ shopSubName +')</span>';
        document.getElementById("confirm-coupon-name").innerHTML= couponName;
        $("#shop_id").val(shopId);
        $("#use-coupon-confirm").dialog({
            resizable: false,
            modal: true,
            title: "쿠폰 사용",
            height: 350,
            width: '90%',
            resizable:false,
            buttons: {
                "예": function () {
                    $('#delete_card').unbind('click');
                    useCouponCallback(shopId, couponNum);
                    $(this).dialog('close');
                },
                "아니오": function () {
                    $(this).dialog('close');
                }
            }
        });
    }

    function deleteCoupon(shopId, couponNum) {
        $("#delete-coupon-confirm").dialog({
            resizable: false,
            modal: true,
            title: "쿠폰 삭제",
            height: 200,
            width: '90%',
            resizable:false,
            buttons: {
                "예": function () {
                    $('#delete_card').unbind('click');
                    $(this).dialog('close');
                    deleteCouponCallback(shopId, couponNum);
                },
                "아니오": function () {
                    $(this).dialog('close');
                }
            }
        });
    }

    function shopManagerConfirm() {
        $("#shop-manager-confirm").dialog({
            resizable: false,
            modal: true,
            title: "쿠폰 발급",
            height: 200,
            width: '90%',
            resizable:false,
            buttons: {
                "매니저에게 재요청": function () {
                    retryCoupon();
                    $(this).dialog('option',
                        'buttons',
                        {
                            "닫기": function () {
                                $(this).dialog('close');
                           }
                        }
                    );
                },
                "닫기": function () {
                    $(this).dialog('close');
                }
            }
        });
    }
</script>

<script src="https://papastamp.com:8060/socket.io/socket.io.js"></script>
<!--<script src="http://localhost:8060/socket.io/socket.io.js"></script>-->
<script type="text/javascript">
    var pushUserId = $("#user_id").val();
    var convertUrl = ($("#url").val().substr(0, 5) == 'https') ? $("#url").val() : $("#url").val().substr(0,16);
    var socket = io.connect(convertUrl+':8060');
    socket.on(pushUserId, function(data) {
        var shopId = $("#shop_id").val();
        if(shopId == data.sendId) {
            if (data.type == "request-coupon") {
                shopManagerConfirm();
            } else if (data.type == "issued-coupon") {
                var headers = {};
                headers["user_id"] = pushUserId;
                var dataString = {'shop_id': shopId, 'coupon_number': data.couponNumber};
                $.ajax({
                    url: $("#url").val() + '/coupon/v1/useCoupon',
                    type: 'PUT',
                    headers: headers,
                    dataType: 'json',
                    data: dataString,
                    success: function (data) {
                        $("#shop-manager-confirm").dialog('close');
                        $("#use-coupon-confirm").dialog('close');
                        document.getElementById("use-coupon-" + data.couponNumber).className = 'delete-coupon';
                        document.getElementById("use-coupon-" + data.couponNumber).onclick = function () {
                            deleteCoupon();
                        };
                        document.getElementById("use-coupon-" + data.couponNumber).innerHTML = '삭제하기';
                        document.getElementById("use-coupon-date-" + data.couponNumber).innerHTML = '사용날짜 : ' + '<span style="font-size:1em;color:white">' + data.viewDate + '</span>';
                        $("#" + data.shopId + "-" + data.couponNumber).addClass("used-deemed");
                        $("#shop_id").val('');
                    },
                    error: function (request, status, error) {
                        console.error("selectStampDate : code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
                    }
                });
            }
        }
    });
</script>

<script type="text/javascript">
    var drawingFlag = true; // 선이 그려지고 있는 상태를 가지고 있을 변수입니다
    var moveLine; // 선이 그려지고 있을때 마우스 움직임에 따라 그려질 선 객체 입니다
    var clickLine // 마우스로 클릭한 좌표로 그려질 선 객체입니다
    var distanceOverlay; // 선의 거리정보를 표시할 커스텀오버레이 입니다
    var dots = {}; // 선이 그려지고 있을때 클릭할 때마다 클릭 지점과 거리를 표시하는 커스텀 오버레이 배열입니다.
    var clickCheck = false;
    var currentLat = '';
    var currentLng = '';
    var map='';

    function mapPapaShop() {
        currentLat = $("#current_lat").val();
        currentLng = $("#current_lng").val();

        var currentMarkerSrc = '/images/shop-map/current_point.png', // 현재 위치 마커이미지
            currentMarkerSize = new daum.maps.Size(26, 40), // 현재 위치 마커이미지의 크기
            currentMarkerOption = {offset: new daum.maps.Point(13, 35)}; // 현재 위치 마커이미지의 옵션

        var currentMarkerImage = new daum.maps.MarkerImage(currentMarkerSrc, currentMarkerSize, currentMarkerOption);
        var currentMarkerPosition = new daum.maps.LatLng(currentLat, currentLng); // 마커가 표시될 위치

        // 마커와 인포윈도우를 표시합니다
        displayMarker(currentMarkerPosition, currentMarkerImage);

        var cooperatorShopUrl ='/mapData/cooperator/papaShop.json';

        //shop list data 초기화
        var shopDataList = document.getElementById('map_list_wrap');
        shopDataList.innerHTML = '';

        // 마커 클러스터러를 생성합니다
        var clusterer = new daum.maps.MarkerClusterer({
            map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
            averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
            minLevel: 8 // 클러스터 할 최소 지도 레벨
        });

        var selectedMarker = null;

        userShopList(currentLat, currentLng);
    }

    //Shop List
    function userShopList(currentLat, currentLng) {
        var headers = {};
        headers["user_id"] = $("#user_id").val();

        //var initShopId = $("#initShopId").val();

        var dataString = {'current_lat': currentLat, 'current_lng': currentLng};
        $.ajax({
            url: $("#url").val() + '/coupon/v1/shopList',
            type: 'GET',
            headers : headers,
            dataType: 'json',
            data: dataString,
            success: function(data) {
                var shopData = data.shopListData;
                if(shopData.length == 0) { //|| shopData[0].USER_ID == initShopId) {

                }else {
                    var mypositions = [];

                    for(var i=0; i<shopData.length; i++) {
                        mypositions[i] = {'index': i, 'lat': shopData[i].SHOP_LAT,'lng': shopData[i].SHOP_LNG};
                    }

                    showClusterer(mypositions);
                }
            },
            error: function(request, status, error) {
                console.log("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
                console.log('Error occured');
            }
        });
    }

    function showClusterer(mypositions) {
        // 마커 클러스터러를 생성합니다
        var clusterer = new daum.maps.MarkerClusterer({
            map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
            averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
            minLevel: 8 // 클러스터 할 최소 지도 레벨
        });

        var selectedMarker = null;
        var changeImage = null;
        var markers = $(mypositions).map(function (i, position) {
            var imageSrc = '/images/shop-map/shop_point.png';
            var clickImageSrc = '/images/shop-map/select_point.png';

            // 표시될 shop data
            var imageSize = new daum.maps.Size(26, 40), // 마커이미지의 크기입니다
                imageOprion = {offset: new daum.maps.Point(13, 35)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.
            var normalImage = new daum.maps.MarkerImage(imageSrc, imageSize, imageOprion);

            // 클릭된 shop data
            var clickImageSize = new daum.maps.Size(26, 40), // 마커이미지의 크기입니다
                clickImageOprion = {offset: new daum.maps.Point(13, 35)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.
            var clickImage = new daum.maps.MarkerImage(clickImageSrc, clickImageSize, clickImageOprion);

            var marker = new daum.maps.Marker({
                position: new daum.maps.LatLng(position.lat, position.lng),
                image: normalImage
            });

            daum.maps.event.addListener(marker, 'click', function () {
                if(selectedMarker == null) {
                    marker.setImage(clickImage);
                    changeImage = normalImage;
                }else if(selectedMarker !== marker) {
                    marker.setImage(clickImage);
                    !!selectedMarker && selectedMarker.setImage(changeImage);
                    changeImage = normalImage;
                }

                // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다
                selectedMarker = marker;
                var headers = {};
                headers["user_id"] = $("#user_id").val();

                //shop data
                var dataString = {'current_lat': position.lat, 'current_lng': position.lng};
                $.ajax({
                    url: $("#url").val() + '/coupon/v1/shopData',
                    type: 'GET',
                    headers : headers,
                    dataType: 'json',
                    data: dataString,
                    success: function (data) {
                        var shopData = data.shopData;
                        var userId = data.userId;
                        var usedYn = shopData.USED_YN;
                        var clickMapData = document.getElementById('map_list_wrap');
                        clickMapData.innerHTML = '';

                        clickMapData.innerHTML += '<div class="address-row">' +
                            '<div class="col-xs-10 address-right">' +
                            '<a href="javascript:"><div class="icon" onclick="guidePapaShopLoad('+ shopData.SHOP_LAT+','+ shopData.SHOP_LNG+')"><img class="guide" src="/images/shop-map/map_load_pin.png"></div></a>' +
                            '<div class="select-shop-name">'+ shopData.SHOP_NAME +
                            '<span class="select-shop-sub-name">(' + shopData.SHOP_SUB_NAME + ')</span>' +
                            '<span class="select-shop-phone"><i class="fa fa-phone" style="font-size: 16px;margin-left:5px;"></i> : '+ shopData.SHOP_PHONE +'</span>' +
                            '<p class="select-shop-addr"><i class="fa fa-home" style="font-size: 16px;margin-left:5px;"></i> : '+ shopData.SHOP_ADDR +'</p>' +
                            '</div>' +
                            '</div>' +
                            '</div>';

                        var appendId = $('#common-template');
                        var appendData = '<ul class="my-card-list" id="select-card">';
                        if(usedYn == "Y") {
                            appendData +='<li class="my-card-coupon used-deemed" >';
                        }else {
                            appendData +='<li class="my-card-coupon">';
                        }
                        appendData +='<div class="my-container">' +
                            '<div class="my-card">' +
                            '<figure class="front">' +
                            '<img class="base-img" src="/images/shop-coupon/'+ shopData.COUPON_IMG +'" alt="back">' +
                            '<div class="caption">';
                        if(usedYn == "Y") {
                            appendData += '<h5 class="delete-coupon" onclick="deleteCoupon(\''+ shopData.SHOP_ID +'\',\'' + shopData.COUPON_NUMBER +'\');">삭제하기</h5>' +
                                '<h3>' + shopData.SHOP_NAME + '<span>(' + shopData.SHOP_SUB_NAME + ')</span></h3>' +
                                '<h4>' + shopData.COUPON_NAME + '<span>' + shopData.COUPON_PRICE + '원</span></h4>' +
                                '<div class="coupon-name" id="use-coupon-date-btn">사용날짜 : <span style="font-size:1em;color:white">'+ shopData.USED_DT +'</span></div>' +
                                '<h6>✿ 유효 기간 : ' + shopData.EXPIRATION_DT + '</h6>';
                        }else {
                            appendData += '<h5 calss="coupon-use" onclick="useCoupon(\''+ shopData.SHOP_ID +'\',\'' + shopData.SHOP_NAME +'\',\'' + shopData.SHOP_SUB_NAME +'\',' +
                                '\'' + shopData.COUPON_NAME +'\',\'' + shopData.COUPON_NUMBER +'\');">사용하기</h5>' +
                                '<h3>' + shopData.SHOP_NAME + '<span>(' + shopData.SHOP_SUB_NAME + ')</span></h3>' +
                                '<h4>' + shopData.COUPON_NAME + '<span>' + shopData.COUPON_PRICE + '원</span></h4>' +
                                '<div class="coupon-name" id="use-coupon-date-btn">쿠폰 번호 : <span style="font-size:1em;color:white">'+ shopData.COUPON_NUMBER +'</span></div>' +
                                '<h6>✿ 유효 기간 : ' + shopData.EXPIRATION_DT + '</h6>';
                        }
                        appendData += '</div>' +
                            '</figure>' +
                            '</div>' +
                            '</div>' +
                            '</li>' +
                            '</ul>';
                        if($('#select-card').length) {
                            $('#select-card').remove();
                            appendId.append(appendData);
                        }else {
                            appendId.append(appendData);
                        }
                    },
                    error: function (request, status, error) {
                        console.log("code:" + request.status + "\n" + "message:" + request.responseText + "\n" + "error:" + error);
                        console.log('Error occured');
                    }
                });
            });

            if(i == 0) {
                daum.maps.event.trigger(marker, 'click', '');
            }

            return marker;
        });

        // 클러스터러에 마커들을 추가합니다
        clusterer.addMarkers(markers);
    }

    // 지도에 마커와 인포윈도우를 표시하는 함수입니다
    function displayMarker(currentMarkerPosition, currentMarkerImage) {
        map = new daum.maps.Map(document.getElementById('map'), { // 지도를 표시할 div
            center : currentMarkerPosition, // 지도의 중심좌표
            level : 8 // 지도의 확대 레벨
        });

        // 현재 위치 마커를 생성합니다
        var marker = new daum.maps.Marker({
            map: map,
            position: currentMarkerPosition,
            image: currentMarkerImage // 마커이미지 설정
        });
        marker.setMap(map);

        initClick(currentMarkerPosition);

        // 지도에 클릭 이벤트를 등록합니다
        // 지도를 클릭하면 선 그리기가 시작됩니다 그려진 선이 있으면 지우고 다시 그립니다
        daum.maps.event.addListener(map, 'click', function(mouseEvent) {

            // 마우스로 클릭한 위치입니다
            var clickPosition = mouseEvent.latLng;

            // 그려지고 있는 선의 좌표 배열을 얻어옵니다
            var path = clickLine.getPath();

            // 좌표 배열에 클릭한 위치를 추가합니다
            path.push(clickPosition);

            // 다시 선에 좌표 배열을 설정하여 클릭 위치까지 선을 그리도록 설정합니다
            clickLine.setPath(path);

            var distance = Math.round(clickLine.getLength());
            displayCircleDot(clickPosition, distance);

            // 지도 오른쪽 클릭 이벤트가 발생했는데 선을 그리고있는 상태이면
            if (drawingFlag) {
                clickCheck = true;
                // 마우스무브로 그려진 선은 지도에서 제거합니다
                moveLine.setMap(null);
                moveLine = null;

                // 마우스 클릭으로 그린 선의 좌표 배열을 얻어옵니다
                var path = clickLine.getPath();

                // 선을 구성하는 좌표의 개수가 2개 이상이면
                if (path.length > 1) {

                    // 마지막 클릭 지점에 대한 거리 정보 커스텀 오버레이를 지웁니다
                    if (dots[dots.length-1].distance) {
                        dots[dots.length-1].distance.setMap(null);
                        dots[dots.length-1].distance = null;
                    }

                    var distance = Math.round(clickLine.getLength()), // 선의 총 거리를 계산합니다
//                        content = getTimeHTML(distance); // 커스텀오버레이에 추가될 내용입니다
                        content = '<div class="dotOverlay distanceInfo">현재 위치와의 거리 : <span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다
                    // 그려진 선의 거리정보를 지도에 표시합니다
                    showDistance(content, path[path.length-1]);

                }

                // 상태를 false로, 그리지 않고 있는 상태로 변경합니다
                drawingFlag = false;
            }else {
                clickCheck = false;
                // 선을 구성하는 좌표의 개수가 1개 이하이면
                // 지도에 표시되고 있는 선과 정보들을 지도에서 제거합니다.
                deleteClickLine();
                deleteCircleDot();
                deleteDistnce();

                var markerPositionN = new daum.maps.LatLng(currentLat, currentLng); // 마커가 표시될 위치입니다
                initClick(markerPositionN);
                drawingFlag = true;
            }
        });
    }

    function guidePapaShopLoad(shopLat, shopLng) {
        // 지도를 재설정할 범위정보를 가지고 있을 LatLngBounds 객체를 생성합니다
        var bounds = new daum.maps.LatLngBounds();

        var mouseEvent = {
            latLng: new daum.maps.LatLng(shopLat, shopLng)
        };
        if(clickCheck) {
            daum.maps.event.trigger(map, 'click', mouseEvent);
        }
        clickCheck = true;
        daum.maps.event.trigger(map, 'click', mouseEvent);

        // LatLngBounds 객체에 좌표를 추가합니다
        bounds.extend(new daum.maps.LatLng(shopLat, shopLng));

        // LatLngBounds 객체에 추가된 좌표들을 기준으로 지도의 범위를 재설정합니다. 이때 지도의 중심좌표와 레벨이 변경될 수 있습니다
        map.setBounds(bounds);
    }

    // 지도 확대, 축소 컨트롤에서 확대 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
    function zoomIn() {
        map.setLevel(map.getLevel() - 1);
    }

    // 지도 확대, 축소 컨트롤에서 축소 버튼을 누르면 호출되어 지도를 확대하는 함수입니다
    function zoomOut() {
        map.setLevel(map.getLevel() + 1);
    }

    function initClick(currentMarkerPosition) {
        deleteCircleDot();
        clickLine = new daum.maps.Polyline({
            map: map, // 선을 표시할 지도입니다
            path: [currentMarkerPosition], // 선을 구성하는 좌표 배열입니다 클릭한 위치를 넣어줍니다
            strokeWeight: 3, // 선의 두께입니다
            strokeColor: '#db4040', // 선의 색깔입니다
            strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
            strokeStyle: 'solid' // 선의 스타일입니다
        });

        // 선이 그려지고 있을 때 마우스 움직임에 따라 선이 그려질 위치를 표시할 선을 생성합니다
        moveLine = new daum.maps.Polyline({
            strokeWeight: 0, // 선의 두께입니다
            strokeColor: '#db4040', // 선의 색깔입니다
            strokeOpacity: 0.5, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
            strokeStyle: 'solid' // 선의 스타일입니다
        });

        // 마우스 커서의 현재 위치를 얻어옵니다
        var mousePosition = currentMarkerPosition;
        // 마우스 클릭으로 그려진 선의 좌표 배열을 얻어옵니다
        var path = clickLine.getPath();

        // 마우스 클릭으로 그려진 마지막 좌표와 마우스 커서 위치의 좌표로 선을 표시합니다
        var movepath = [path[path.length-1], mousePosition];
        moveLine.setPath(movepath);
        moveLine.setMap(map);

        var userId = $("#user_id").val();
        if(userId.length > 0) {
            var distance = Math.round(clickLine.getLength() + moveLine.getLength()), // 선의 총 거리를 계산합니다
                content = '<div class="dotOverlay distanceInfo">현재 위치 : <span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다
        }else {
            var distance = Math.round(clickLine.getLength() + moveLine.getLength()), // 선의 총 거리를 계산합니다
                content = '<div class="dotOverlay distanceInfo">파파스탬프 : <span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다
        }

        // 거리정보를 지도에 표시합니다
        showDistance(content, mousePosition);
        displayCircleDot(mousePosition, 0);
    }

    // 클릭으로 그려진 선을 지도에서 제거하는 함수입니다
    function deleteClickLine() {
        if (clickLine) {
            clickLine.setMap(null);
            clickLine = null;
        }
    }

    // 마우스 드래그로 그려지고 있는 선의 총거리 정보를 표시하거
    // 마우스 오른쪽 클릭으로 선 그리가 종료됐을 때 선의 정보를 표시하는 커스텀 오버레이를 생성하고 지도에 표시하는 함수입니다
    function showDistance(content, position) {

        if (distanceOverlay) { // 커스텀오버레이가 생성된 상태이면
            // 커스텀 오버레이의 위치와 표시할 내용을 설정합니다
            distanceOverlay.setPosition(position);
            distanceOverlay.setContent(content);

        } else { // 커스텀 오버레이가 생성되지 않은 상태이면
            // 커스텀 오버레이를 생성하고 지도에 표시합니다
            distanceOverlay = new daum.maps.CustomOverlay({
                map: map, // 커스텀오버레이를 표시할 지도입니다
                content: content,  // 커스텀오버레이에 표시할 내용입니다
                position: position, // 커스텀오버레이를 표시할 위치입니다.
                xAnchor: 0,
                yAnchor: 0,
                zIndex: 3
            });
        }
    }

    // 그려지고 있는 선의 총거리 정보와
    // 선 그리가 종료됐을 때 선의 정보를 표시하는 커스텀 오버레이를 삭제하는 함수입니다
    function deleteDistnce () {
        if (distanceOverlay) {
            distanceOverlay.setMap(null);
            distanceOverlay = null;
        }
    }

    // 선이 그려지고 있는 상태일 때 지도를 클릭하면 호출하여
    // 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 표출하는 함수입니다
    function displayCircleDot(position, distance) {
        // 클릭 지점을 표시할 빨간 동그라미 커스텀오버레이를 생성합니다
        var circleOverlay = new daum.maps.CustomOverlay({
            content: '<span class="dot"></span>',
            position: position,
            zIndex: 1
        });

        // 지도에 표시합니다
        circleOverlay.setMap(map);

        if (distance > 0) {
            // 클릭한 지점까지의 그려진 선의 총 거리를 표시할 커스텀 오버레이를 생성합니다
            var distanceOverlay = new daum.maps.CustomOverlay({
                content: '<div class="dotOverlay">거리 <span class="number">' + distance + '</span>m</div>',
                position: position,
                yAnchor: 1,
                zIndex: 2
            });

            // 지도에 표시합니다
            distanceOverlay.setMap(map);
        }

        // 배열에 추가합니다
        dots.push({circle:circleOverlay, distance: distanceOverlay});
    }

    // 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 지도에서 모두 제거하는 함수입니다
    function deleteCircleDot() {
        var i;

        for ( i = 0; i < dots.length; i++ ){
            if (dots[i].circle) {
                dots[i].circle.setMap(null);
            }

            if (dots[i].distance) {
                dots[i].distance.setMap(null);
            }
        }

        dots = [];
    }
</script>